aliases:
  - &defaults
    docker:
      - image: 'alpine:3.9'
        auth:
          username: $DOCKER_USER # can specify string literal values
          password: $DOCKER_PASS # or project environment variable reference
    environment:
      TMP: /root/tmp
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      REDIS_HOST: oae-redis
      REDIS_PORT: 6379
      npm_config_yes: true
    working_directory: ~/Hilary
  - &install_system_dependencies
    run:
      name: Install system dependencies
      command: |
        apk add --update --no-cache \
          curl \
          git \
          openssh-client \
          docker \
          py-pip \
          python-dev \
          libffi-dev \
          openssl-dev \
          gcc \
          libc-dev \
          make
  - &update_config
    run:
      name: Adjusting Hilary configuration for tests to run
      command: |
        printf "\nconfig.ui.path = './3akai-ux';" >> config.js
        printf "\nconfig.cassandra.hosts = ['oae-cassandra'];" >> config.js
        printf "\nconfig.cassandra.timeout = 9000;" >> config.js
        printf "\nconfig.redis.host = 'oae-redis';" >> config.js
        printf "\nconfig.search.nodes = ['http://oae-elasticsearch:9200'];" >> config.js
        printf "\nconfig.mq.host = 'oae-redis';" >> config.js
        printf "\nconfig.previews.enabled = true;" >> config.js
        printf "\nconfig.email.debug = false;" >> config.js
        printf "\nconfig.email.transport = 'sendmail';" >> config.js
        printf "\nconfig.previews.office.binary = '/usr/bin/soffice';" >> config.js
        printf "\nconfig.previews.screenShotting.binary = '/usr/bin/chromium-browser';" >> config.js
        printf "\nconfig.previews.screenShotting.sandbox = '--no-sandbox';" >> config.js
  - &copy_artifacts
    run:
      name: Copy logs to host
      command: |
        docker cp oae-hilary:/usr/src/Hilary/tests.log reports/logs
  - &store_results
    store_test_results:
      path: reports
  - &upload_logs
    store_artifacts:
      path: reports/logs/tests.log
  - &run_sequential_tests
    run:
      name: Run tests sequentially and upload coverage
      command: |
        docker-compose run --rm oae-hilary "\
          yarn run migrate; \
          cp ep-settings.json etherpad/settings.json; \
          cp ep-package.json etherpad/src/package.json; \
          yarn run etherpad; \
          yarn run ethercalc; \
          yarn run test-with-coverage"
  - &run_parallel_tests
    run:
      name: Run tests in parallel
      command: |
        docker-compose run --rm oae-hilary "\
          yarn run migrate; \
          cp ep-settings.json etherpad/settings.json; \
          cp ep-package.json etherpad/src/package.json; \
          yarn run etherpad; \
          yarn run ethercalc; \
          yarn run test-module $(circleci tests glob 'packages/oae-*/tests' | circleci tests split | tr '\n' ' ')"
  - &run_linting
    run:
      name: Run linting test
      command: |
        docker-compose run --rm oae-hilary "yarn run lint-module $(circleci tests glob 'packages/**/*.js' | circleci tests split | tr '\n' ' ')"
  - &install_dependencies
    run:
      name: Install Hilary dependencies
      command: |
        docker-compose run --rm oae-hilary 'yarn run prepare-3akai'
        docker-compose run --rm oae-hilary 'yarn run prepare-etherpad'
        docker-compose run --rm oae-hilary 'yarn run prepare-ethercalc'
        docker-compose run --rm oae-hilary 'npx lerna bootstrap'
  - &copy_code
    run:
      name: Copy code
      command: |
        addgroup -g 1000 node
        adduser -u 1000 -G node -s /bin/sh -D node
        chown -R node:node .
        docker cp /root/Hilary oae-hilary:/usr/src
        mkdir -p reports/logs
  - &create_containers
    run:
      name: Create the containers
      command: docker-compose up --no-start --build oae-cassandra oae-redis oae-elasticsearch oae-hilary
  - &launch_containers
    run:
      name: Start the containers
      command: |
        docker-compose up -d oae-cassandra oae-redis oae-elasticsearch
  - &install_docker_compose
    run:
      name: Install docker-compose
      command: |
        pip install docker-compose~=1.23.2
  - &setup_remote_docker
    setup_remote_docker:
      version: 19.03.13

version: 2.1
jobs:
  test:
    <<: *defaults
    parallelism: 4
    steps:
      - *setup_remote_docker
      - *install_system_dependencies
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *update_config
      - *install_docker_compose
      - *create_containers
      - *launch_containers
      - *copy_code
      - *install_dependencies
      - *run_linting
      - *run_parallel_tests # doesn't include coverage
      - *copy_artifacts
      - *store_results
      - *upload_logs
  coverage:
    <<: *defaults
    parallelism: 1
    steps:
      - *setup_remote_docker
      - *install_system_dependencies
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *update_config
      - *install_docker_compose
      - *create_containers
      - *launch_containers
      - *copy_code
      - *install_dependencies
      - *run_linting
      - *run_sequential_tests # includes coverage
      - *copy_artifacts
      - *store_results
      - *upload_logs

workflows:
  version: 2
  lint-and-test:
    jobs:
      - test
  scheduled:
    triggers:
      - schedule:
          cron: 0 1 * * *
          filters:
            branches:
              only: master
    jobs:
      - coverage
