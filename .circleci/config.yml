version: 2
jobs:
  test_with_dockers:
    parallelism: 1
    machine: true
    working_directory: ~/Hilary
    steps:
      - checkout
      # checkout submodules
      - run: git submodule update --init --recursive
      # checkout master branch of all submodules (default is detached)
      - run: git submodule foreach -q --recursive 'branch="$(git config -f $toplevel/.gitmodules submodule.$name.branch)"; [ -z "$branch" ] && git checkout master || git checkout $branch'
      # change docker-compose absolute paths for volume mounting
      - run: sed -i -e 's/- \/src\/Hilary/- \/home\/circleci\/Hilary/g' docker-compose.yml
      - run: sed -i -e 's/- \/src\/files/- \/home\/circleci\/files/g' docker-compose.yml
      - run: sed -i -e 's/\/src\/tmp/\/home\/circleci\/tmp/g' docker-compose.yml
      # change some configuration
      - run: printf "\n\nconfig.ui.path = './3akai-ux';" >> config.js
      - run: printf "\n\nconfig.cassandra.hosts = ['oae-cassandra'];" >> config.js
      - run: printf "\n\nconfig.redis.host = 'oae-redis';" >> config.js
      - run: printf "\n\nconfig.search.hosts[0].host = 'oae-elasticsearch';" >> config.js
      - run: printf "\n\nconfig.mq.connection.host = 'oae-rabbitmq';" >> config.js
      - run: printf "\n\nconfig.etherpad.hosts[0].host = 'oae-etherpad';" >> config.js
      - run: printf "\n\nconfig.previews.enabled = true;" >> config.js
      - run: printf "\n\nconfig.email.debug = false;" >> config.js
      - run: printf "\n\nconfig.email.transport = 'sendmail';" >> config.js
      # build the hilary:latest image
      - run: docker-compose create --build
      # install dependencies for 3akai-ux
      - run: docker-compose run oae-hilary 'npm install --prefix ./3akai-ux -s '
      # install dependencies for Hilary
      - run: docker-compose run oae-hilary 'npm install -s'
      # run tests for all modules
      - run: docker-compose run oae-hilary 'grunt test'
  test_with_node:
    environment:
      - NODE_VERSION: 6.11.1
    parallelism: 1
    machine: true
    working_directory: ~/Hilary
    steps:
      - checkout
      # checkout submodules
      - run: git submodule update --init --recursive
      # checkout master branch of all submodules (default is detached)
      - run: git submodule foreach -q --recursive 'branch="$(git config -f $toplevel/.gitmodules submodule.$name.branch)"; [ -z "$branch" ] && git checkout master || git checkout $branch'
      # change docker-compose absolute paths for volume mounting
      - run: sed -i -e 's/- \/src\/Hilary/- \/home\/circleci\/Hilary/g' docker-compose.yml
      - run: sed -i -e 's/- \/src\/files/- \/home\/circleci\/files/g' docker-compose.yml
      - run: sed -i -e 's/\/src\/tmp/\/home\/circleci\/tmp/g' docker-compose.yml
      # change some configuration
      - run: printf "\n\nconfig.ui.path = './3akai-ux';" >> config.js
      - run: printf "\n\nconfig.cassandra.hosts = ['localhost'];" >> config.js
      - run: printf "\n\nconfig.redis.host = 'localhost';" >> config.js
      - run: printf "\n\nconfig.search.hosts[0].host = 'localhost';" >> config.js
      - run: printf "\n\nconfig.mq.connection.host = 'localhost';" >> config.js
      - run: printf "\n\nconfig.etherpad.hosts[0].host = 'localhost';" >> config.js
      - run: printf "\n\nconfig.previews.enabled = true;" >> config.js
      - run: printf "\n\nconfig.email.debug = false;" >> config.js
      - run: printf "\n\nconfig.email.transport = 'sendmail';" >> config.js
      - run: printf "\n\nconfig.servers.serverInternalAddress = '0.0.0.0';" >> config.js
      - run: printf "\n\ntmpDir = '~/Hilary/tmp';" >> config.js
      # build the hilary:latest image
      - run: docker-compose create --build
      # install dependencies for Hilary
      - run: sudo apt-get update && sudo apt-get install -y --no-install-recommends autoconf automake bzip2 ca-certificates curl file g++ gcc    ghostscript git graphicsmagick libbz2-dev libc6-dev libcurl4-openssl-dev libevent-dev libffi-dev libgeoip-dev libglib2.0-dev libjpeg-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmysqlclient-dev libncurses-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make openssh-client patch wget xz-utils zlib1g-dev
      - run: set -ex && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE ; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; done
      - run: curl -SLO "https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz" && curl -SLO "https://nodejs.org/dist/v6.11.1/SHASUMS256.txt.asc" && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && grep " node-v6.11.1-linux-x64.tar.xz\$" SHASUMS256.txt | sha256sum -c - && tar -xJf "node-v6.11.1-linux-x64.tar.xz" -C /usr/local --strip-components=1 && rm "node-v6.11.1-linux-x64.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt && ln -s /usr/local/bin/node /usr/local/bin/nodejs
      #- run: docker-compose run oae-hilary 'npm install -s'
      - run: npm install -s
      - run: docker-compose up -d
      - run: docker-compose stop oae-hilary
      - run: docker-compose restart oae-etherpad
      - run: sudo apt-get install -y --no-install-recommends libreoffice libreoffice-writer ure libreoffice-java-common libreoffice-core libreoffice-common # openjdk-7-jre
      - run: sudo apt-get -y -q remove libreoffice-gnome
      - run: adduser --home=/opt/libreoffice --disabled-password --gecos "" --shell=/bin/bash libreoffice
      - run: echo "deb http://ftp.de.debian.org/debian sid main" >> /etc/apt/sources.list
      - run: sudo apt-get update && sudo apt-get install -y --allow-unauthenticated --no-install-recommends   chrpath   libpoppler-glib-dev pdf2htmlex poppler-utils python-poppler && rm -rf /var/lib/apt/lists/*
      # run tests for all modules
      - run: grunt test

workflows:
  version: 2
  test_both_ways:
    jobs:
      - test_with_node
      - test_with_dockers
