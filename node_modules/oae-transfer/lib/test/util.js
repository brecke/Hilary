/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var shortid = require('shortid');
var util = require('util');

var AuthzTestUtil = require('oae-authz/lib/test/util');
var AuthzUtil = require('oae-authz/lib/util');
var ContentTestUtil = require('oae-content/lib/test/util');
var Context = require('oae-context').Context;
var LibraryAPI = require('oae-library');
var LibraryTestUtil = require('oae-library/lib/test/util');
var MQTestUtil = require('oae-util/lib/test/mq-util');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var Transfer = require('oae-transfer/lib/model').Transfer;

var TransferDAO = require('../internal/dao');


/* ================ CREATE TRANSFER ================ */

/**
 * Generate a transfer
 *
 * @param  {RestContext}    restContext             The REST context to use for making requests
 * @param  {Function}       callback                Standard callback function
 * @param  {Folder}         callback.transfer...    All folders that were generated as separate callback parameters
 * @throws {AssertionError}                         Thrown if an error occurred generating the tranfer
 */
var generateTestTransfer = module.exports.generateTestTransfer = function(restContext, emailOrigin, emailTarget, idUserOrigin, callback, transfer) {

    RestAPI.Transfer.createTransfer(restContext, emailOrigin, emailTarget, idUserOrigin, function(err, createdTransfer) {
        assert.ok(!err);
        return generateTestTransfer(restContext, callback, createdTransfer);
    });
    
};

/**
 * Create a transfer
 *
 * @param  {RestContext}    restContext             The REST context to use for making requests
 * @param  {Function}       callback                Standard callback function
 * @param  {Folder}         callback.transfer...    All folders that were generated as separate callback parameters
 * @throws {AssertionError}                         Thrown if an error occurred generating the tranfer
 */
var assertCreateTransferSucceeds = module.exports.assertCreateTransferSucceeds = function(restContext, emailOrigin, emailTarget, idUserOrigin, callback, transfer) {

    RestAPI.Transfer.createTransfer(restContext, emailOrigin, emailTarget, idUserOrigin, function(err, createdTransfer) {
        assert.ok(createdTransfer);
        assert.ok(createdTransfer.code);
        assert.equal(createdTransfer.emailOrigin, emailOrigin);
        assert.equal(createdTransfer.emailTarget, emailTarget);
        assert.equal(createdTransfer.idUserOrigin, idUserOrigin);
        return assertCreateTransferSucceeds(restContext, callback, createdTransfer);
    });
    
};

/* ================ GET TRANSFER ================ */

/**
 * Get a transfer, ensuring that it fails in a specified way
 *
 * @param  {RestContext}        restContext     The REST context to use when getting the transfer
 * @param  {String}             email           The email for the user who wants to make the transfer
 * @param  {Number}             httpCode        The expected failure HTTP code of the request
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertGetTransferFails = module.exports.assertGetTransferFails = function(restContext, email, httpCode, callback) {
    RestAPI.Transfer.getTransferByEmail(restContext, email, function(err, transfer) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!transfer);
        return callback();
    });
};

/**
 * Get a transfer, ensuring that the request is successful
 *
 * @param  {RestContext}        restContext     The REST context to use when getting the transfer
 * @param  {String}             email           The email for the user who wants to make the transfer
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertGetTransferSucceeds = module.exports.assertGetTransferSucceeds = function(restContext, email, callback) {
    RestAPI.Folders.getFolder(restContext, email, function(err, transfer) {
        assert.ok(!err);
        assert.ok(transfer);
        assert.strictEqual(transfer.emailOrigin, email);
        return callback(transfer);
    });
};

/* ================ DELETE TRANSFER ================ */

/**
 * Delete a transfer, ensuring that it fails in a specified way
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             email           The emailOrigin of the transfer to delete
 * @param  {Number}             httpCode        The expected failure HTTP code of the request
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertDeleteTransferFails = module.exports.assertDeleteTransferFails = function(restContext, email, httpCode, callback) {
    RestAPI.Transfer.deleteTransfer(restContext, email, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Delete a transfer, ensuring that the request is successful
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             email           The emailOrigin of the transfer to delete
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var assertDeleteTransferSucceeds = module.exports.assertDeleteTransferSucceeds = function(restContext, email, callback) {
    RestAPI.Folders.deleteFolder(restContext, email, function(err) {
        assert.ok(!err);
        assert.ok(!transfer);
        // TODO get fail because there is no transfer
        return callback();
    });
};


/* ================ MAKE TRANSFER ================ */

// TODO se suicider

















