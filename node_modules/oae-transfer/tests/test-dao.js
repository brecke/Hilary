/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var AuthzTestUtil = require('oae-authz/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var ContentTestUtil = require('oae-content/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer', function() {

    /*
     * TODO description
     */
    before(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    /*!
     * After each test, ensure that the users rights are correct
     */
    afterEach(function(callback) {
        // Ensure the target user have the same rights as the user who ask for the transfer
        // TODO afterEach
        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, null, ['oae-folders/visibility/folder'], function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    describe('Create Transfer', function() {
		/**
         * Test that verifies creation of a transfer
         */
        it('verify transfer creation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);

                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.email, stuartf.email, mrvisser.id, function(createdTransfer) {
                    // Ensure the returned folder model is accurate
                    assert.ok(createdTransfer);
                    assert.ok(createdTransfer.code);
                    assert.equal(createdTransfer.emailOrigin, mrvisser.email);
                    assert.equal(createdTransfer.emailTarget, stuartf.email);
                    assert.equal(createdTransfer.idUserOrigin, mrvisser.principalId);
                    
                    // Sanity check that the transfer was created
                    TransferTestUtil.assertGetTransferSucceeds(createdTransfer.emailOrigin, function(fetchedTransfer) {
                        // Ensure the fetched folder model is consistent with the created one
                        assert.ok(fetchedTransfer);
                        assert.ok(fetchedTransfer.code);
                        assert.equal(fetchedTransfer.emailOrigin, mrvisser.email);
	                    assert.equal(fetchedTransfer.emailTarget, stuartf.email);
	                    assert.equal(fetchedTransfer.idUserOrigin, mrvisser.principalId);

                        return TransferTestUtil.assertFullFolderMembersEquals(mrvisser.restContext, createdTransfer.id, expectedRoles, callback);
                    });
                });
            });
        });
    });

    describe('Get Transfer', function() {
        /**
         * Test that verifies validation of getting a folder
         */
         // TODO verify code (400 / 404)
        it('verify get transfer valitation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.generateTestTransfer(mrvisser.restContext, mrvisser.email, stuartf.email, mrvisser.principalId, function(transfer) {
                    // Ensure fetching using an invalid id results in an error
                    TransferTestUtil.assertGetTransferFails(mrvisser.restContext, mrvisser.email, 'invalidemail', 400, function() {

                        // Ensure fetching using a non-existing id results in a 404
                        TransferTestUtil.assertGetTransferFails(mrvisser.restContext, 'nonexistingemail@email.com', 404, function() {

                            // Sanity check getting an existing folder
                            TransferTestUtil.assertGetTransferSucceeds(mrvisser.restContext, transfer.emailOrigin, function(transfer) {
                                assert.ok(transfer);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies datas
         */
        it('verify get transfer valitation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.generateTestTransfer(mrvisser.restContext, mrvisser.email, stuartf.email, mrvisser.principalId, function(transfer) {
                    // Sanity check that the transfer was created
                    TransferTestUtil.assertGetTransferSucceeds(createdTransfer.emailOrigin, function(fetchedTransfer) {
                        // Ensure the fetched folder model is consistent with the created one
                        assert.ok(fetchedTransfer);
                        assert.ok(fetchedTransfer.code);
                        assert.equal(fetchedTransfer.emailOrigin, mrvisser.email);
                        assert.equal(fetchedTransfer.emailTarget, stuartf.email);
                        assert.equal(fetchedTransfer.idUserOrigin, mrvisser.principalId);

                        return TransferTestUtil.assertFullFolderMembersEquals(mrvisser.restContext, createdTransfer.id, expectedRoles, callback);
                    });
                });
            });
        });

    });

    describe('Delete Transfer', function() {
        /**
         * Test that verifies validation of deleting a folder
         */
        it('verify delete transfer validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.generateTestTransfer(mrvisser.restContext, mrvisser.email, stuartf.email, mrvisser.principalId, function(transfer) {

                    // Ensure deleting using an invalid id results in an error
                    TransferTestUtil.assertDeleteTransferFails(mrvisser.restContext, 'invalidemail', 400, function() {

                        // Ensure deleting using a non-existing id results in a 404
                        TransferTestUtil.assertDeleteTransferFails(simong.restContext, 'nonexistingemail@email.com', 404, function() {

                            // Sanity-check it was not removed
                            TransferTestUtil.assertGetTransferSucceeds(mrvisser.restContext, transfer.emailOrigin, function(transfer) {
                                assert.ok(!transfer);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });


    // TODO make transfer
    
}




















